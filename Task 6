students_list = []
lecturers_list = []

class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
        students_list.append(self)
 
    def add_courses(self, course_name):
        self.finished_courses.append(course_name)   

    def rate_lecturers(self, lecturer, course, grade):
        if isinstance(lecturer,Lecturer) and course in lecturer.courses_attached\
             and course in self.courses_in_progress and 0 < grade < 11:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'

    def average_grade(self):
        grades_sum = 0
        grades_count = 0      
        for grades in self.grades.values():
            for grade in grades:
                grades_sum += grade
                grades_count += 1
        return grades_sum / grades_count

    def __lt__(self, other):
        if isinstance(other, Student):
            return self.average_grade() < other.average_grade()
        else:
            return "Ошибка"

    def __str__(self):
        return (f'Имя: {self.name}\nФамилия: {self.surname}\n'
                f'Средняя оценка за домашние задания: {round(self.average_grade(), 2)}\n'
                f'Курсы в процессе изучения: {", ".join(map(str, self.courses_in_progress))}\n'
                f'Завершенные курсы: {", ".join(map(str, self.finished_courses))}\n')
 
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        
class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name,surname)
        self.grades = {}
        lecturers_list.append(self)

    def average_grade(self):
        grades_sum = 0
        grades_count = 0      
        for grades in self.grades.values():
            for grade in grades:
                grades_sum += grade
                grades_count += 1
        return grades_sum / grades_count

    def __lt__(self, other):
        if isinstance(other, Lecturer):
            return self.average_grade() < other.average_grade()
        else:
            return "Ошибка"

    def __str__(self):
        return (f'Имя: {self.name}\nФамилия: {self.surname}\n'
                f'Средняя оценка за лекции: {round(self.average_grade(), 2)}\n')

class Rewiewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached\
             and course in student.courses_in_progress and 0 <= grade < 11:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        return f'Имя: {self.name}\nФамилия: {self.surname}\n'

def ag_all_lecturers(lecturers_list, course):
    lecturers_grade = 0
    lecturers_count = 0
    for lecturer in lecturers_list:
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached:
            lecturers_grade += lecturer.average_grade()
            lecturers_count += 1
    if lecturers_count == 0:
        return 'Ошибка'
    return round(lecturers_grade / lecturers_count, 2)


def ag_all_students(students_list, course):
    students_grade = 0
    students_count = 0
    for student in students_list:
        if isinstance(student, Student) and course in student.courses_in_progress:
            students_grade += student.average_grade()
            students_count += 1
    if students_count == 0:
        return 'Ошибка'
    return round(students_grade / students_count, 2)

best_student = Student('Ruoy', 'Eman', 'your_gender')
best_student.courses_in_progress += ['Python']
best_student.courses_in_progress += ['Git']
best_student.add_courses('Введение в программирование')

some_student = Student('Eric', 'Stoltz', 'male')
some_student.courses_in_progress += ['Python']
some_student.courses_in_progress += ['Git']
some_student.add_courses('Введение в программирование')

cool_rewiewer = Rewiewer('Some', 'Buddy')
cool_rewiewer.courses_attached += ['Python']

some_rewiewer = Rewiewer('Nik', 'Frost')
some_rewiewer.courses_attached += ['Git']

cool_lecturer = Lecturer('Some', 'Buddy')
cool_lecturer.courses_attached += ['Python']

some_lecturer = Lecturer('Ivan', 'Karpov')
some_lecturer.courses_attached += ['Git']

best_student.rate_lecturers(cool_lecturer, 'Python', 10)
best_student.rate_lecturers(cool_lecturer, 'Python', 10)
best_student.rate_lecturers(cool_lecturer, 'Python', 10)
best_student.rate_lecturers(some_lecturer, 'Git', 9)
best_student.rate_lecturers(some_lecturer, 'Git', 9)
best_student.rate_lecturers(some_lecturer, 'Git', 10)

some_student.rate_lecturers(cool_lecturer, 'Python', 10)
some_student.rate_lecturers(cool_lecturer, 'Python', 10)
some_student.rate_lecturers(cool_lecturer, 'Python', 10)
some_student.rate_lecturers(some_lecturer, 'Git', 9)
some_student.rate_lecturers(some_lecturer, 'Git', 8)
some_student.rate_lecturers(some_lecturer, 'Git', 9)
 
cool_rewiewer.rate_hw(best_student, 'Python', 10)
cool_rewiewer.rate_hw(best_student, 'Python', 10)
cool_rewiewer.rate_hw(best_student, 'Python', 10)
cool_rewiewer.rate_hw(some_student, 'Python', 7)
cool_rewiewer.rate_hw(some_student, 'Python', 9)
cool_rewiewer.rate_hw(some_student, 'Python', 10)

some_rewiewer.rate_hw(best_student, 'Git', 10)
some_rewiewer.rate_hw(best_student, 'Git', 9)
some_rewiewer.rate_hw(best_student, 'Git', 10)
some_rewiewer.rate_hw(some_student, 'Git', 8)
some_rewiewer.rate_hw(some_student, 'Git', 7)
some_rewiewer.rate_hw(some_student, 'Git', 9)

print(cool_rewiewer)
print(cool_lecturer)
print(best_student)
print(best_student < some_student)
print(cool_lecturer > some_lecturer)
print(ag_all_lecturers(lecturers_list, 'Python'))
print(ag_all_students(students_list, 'Python'))